# ✅ Transformar {#sec-transform-intro .unnumbered}

```{r}
#| echo: false
source("_common.R")
```

A segunda parte do livro abordou, com profundidade, a visualização de dados.
Nesta parte do livro, você aprenderá sobre os tipos mais importantes de variáveis que você encontrará dentro de um *data frame* e conhecerá as ferramentas que pode usar para trabalhar com essas variáveis.

```{r}
#| label: fig-ds-transform
#| echo: false
#| fig-cap: |
#|   As opções de transformação de dados dependem bastante
#|   do tipo de dados envolvidos, que é o foco desta parte
#|   do livro.
#| fig-alt: |
#|   Nosso modelo do processo de ciência de dados com Transformar destacado em azul.
#| out.width: NULL

knitr::include_graphics("diagrams/data-science/transform.png", dpi = 270)
```

Você pode ler esses capítulos de acordo com a sua necessidade; eles foram escritos para serem independentes, permitindo que sejam lidos sem uma ordem específica.

-   O @sec-logicals descreve os vetores lógicos.
    Estes são os tipos mais simples de vetores, porém são extremamente poderosos.
    Neste capítulo, você aprenderá a criar esses vetores lógicos por meio de comparações numéricas, a combiná-los utilizando álgebra booleana, a empregá-los para fazer sumarizações e a aplicá-los em transformações condicionais.

-   O @sec-numbers explora ferramentas para vetores numéricos, a coluna vertebral da ciência de dados.
    Neste capítulo, você aprenderá mais sobre contagem e uma variedade de funções importantes de transformação e sumarização.

-   O @sec-strings fornece as ferramentas necessárias para trabalhar com cadeias de caracteres (*strings*): você conseguirá extrair partes de uma *string*, separar uma *string* em vários caracteres e concatená-los para gerar uma *string* novamente.
    Este capítulo dá ênfase principalmente ao pacote stringr, mas também aborda algumas funções do tidyr voltadas para a extração de dados de *strings*.

-   O @sec-regular-expressions introduz as expressões regulares, uma ferramenta poderosa para manipular cadeias de caracteres (*strings*).
    Este capítulo fará com que você saia da fase de pensar que um um gato caminhou sobre o seu teclado e passe a ler e escrever com facilidade padrões complexos de *strings*.

-   O @sec-factors introduz os fatores: o tipo de dado que o R utiliza para armazenar dados categóricos.
    Você utiliza um fator quando uma variável possui um conjunto fixo de valores possíveis ou quando você deseja atribuir uma ordenação não alfabética a uma *string*.

-   O @sec-dates-and-times fornece as principais ferramentas para trabalhar com datas e horários.
    Infelizmente, quanto mais você aprende sobre datas e horários, parece que o assunto se tornar mais complicado.
    No entanto, com a ajuda do pacote lubridate, você aprenderá a superar os desafios mais frequentes.

-   O @sec-missing-values discute, em detalhes, os valores faltantes (*missing values*).
    Ao longo do livro, abordamos esse tema algumas vezes de forma isolada, mas agora é hora de uma análise mais abrangente que ajude você a distinguir valores ausentes implícitos de valores ausentes explícitos e a compreender como e por que você pode convertê-los.

-   O @sec-joins encerra esta parte do livro sobre transformação, fornecendo ferramentas para unir dois (ou mais) *data frames*.
    Entender sobre uniões (*joins*) fará com que você assimile o conceito de chaves (*keys*) de banco de dados e pense sobre como identificar cada linha em um conjunto de dados.
