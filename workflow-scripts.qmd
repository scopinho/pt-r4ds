# ‚úÖ Fluxo de trabalho: scripts e projetos {#sec-workflow-scripts-projects}

```{r}
#| echo: false

source("_common.R")
```

Este cap√≠tulo ir√° te apresentar duas ferramentas essenciais para organizar seu c√≥digo: scripts e projetos.

## Scripts

At√© agora voc√™ usou o console para executar c√≥digos.
O console √© um √≥timo lugar para come√ßar, mas com o tempo voc√™ perceber√° que ele vai ficando apertado √† medida que criamos gr√°ficos mais complexos com ggplot2 e pipelines mais longas com dplyr.
Para ter mais espa√ßo para trabalhar, use o editor de scripts.
Abra-o clicando no menu Arquivo, selecionando Novo Arquivo e depois R script, ou usando o atalho de teclado Cmd/Ctrl + Shift + N.
Agora voc√™ ver√° quatro pain√©is, como na @fig-rstudio-script.
O editor de scripts √© um √≥timo lugar para experimentar com seu c√≥digo.
Quando voc√™ quiser mudar algo, n√£o precisa reescrever tudo, pode apenas editar o script e execut√°-lo novamente.
E uma vez que voc√™ tenha escrito um c√≥digo que funcione e fa√ßa o que voc√™ quer, pode salv√°-lo como um arquivo de script para retornar a ele facilmente mais tarde.

```{r}
#| label: fig-rstudio-script
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   Abrir o editor de script adiciona um novo painel no canto superior esquerdo da interface de usu√°rio do RStudio.
#| fig-alt: |
#|   RStudio IDE com o Editor, Console e Output destacados.
knitr::include_graphics("diagrams/rstudio/script.png", dpi = 270)
```

### Rodando c√≥digo

O editor de scripts √© um excelente lugar para construir gr√°ficos complexos com ggplot2 ou sequ√™ncias longas de manipula√ß√µes com dplyr.
O segredo para usar o editor de scripts de forma eficaz √© memorizar um dos atalhos de teclado mais importantes: Cmd/Ctrl + Enter.
Isso executa o trecho de c√≥digo atual no console.
Por exemplo, veja o c√≥digo abaixo.

```{r}
#| eval: false

library(dplyr)
library(dados)

nao_cancelado <- voos %>% 
  filter(!is.na(atraso_saida)‚ñà, !is.na(atraso_chegada))

nao_cancelado %>% 
  group_by(ano, mes, dia) %>% 
  summarize(media = mean(atraso_saida))
```

Se o seu cursor estiver em ‚ñà, pressionar Cmd/Ctrl + Enter executar√° o comando completo que gera `nao_cancelado`.
Tamb√©m mover√° o cursor para a declara√ß√£o seguinte (come√ßando com `nao_cancelado |>`).
Isso torna f√°cil percorrer o script completo pressionando repetidamente Cmd/Ctrl + Enter.

Em vez de executar seu c√≥digo express√£o por express√£o, voc√™ tamb√©m pode executar o script completo em um √∫nico passo com Cmd/Ctrl + Shift + S.
Fazer isso regularmente √© uma √≥tima maneira de garantir que voc√™ capturou todas as partes importantes do seu c√≥digo no script.

Recomendamos que voc√™ sempre comece seu script carregando os pacotes de que precisa.
Dessa forma, se voc√™ compartilhar seu c√≥digo com outras pessoas, elas poder√£o ver facilmente quais pacotes precisam instalar.
Observe, no entanto, que voc√™ nunca deve incluir `install.packages()` em um script que compartilha.
√â imprudente passar adiante um script que far√° altera√ß√µes no computador de algu√©m considerando que a pessoa pode n√£o estar atenta ao que est√° fazendo!

Ao trabalhar nos pr√≥ximos cap√≠tulos, recomendamos fortemente que voc√™ comece no editor de scripts e pratique seus atalhos de teclado.
Com o tempo, enviar c√≥digo para o console dessa maneira se tornar√° t√£o natural que voc√™ nem pensar√° sobre isso.

### Diagnosticando problemas no c√≥digo

No editor de scripts, o RStudio destacar√° erros de sintaxe com uma linha ondulada vermelha e um X na barra lateral:

```{r}
#| echo: false
#| out-width: ~
#| fig-alt: |
#|    Editor de script com o script x y <- 10. Um X vermelho indica que h√° um erro
#|    de sintaxe. O erro de sintaxe tamb√©m √© destacado com uma linha ondulada vermelha.

knitr::include_graphics("screenshots/rstudio-diagnostic.png")
```

Para saber mais sobre o problema, passe o mouse sobre o X:

```{r}
#| echo: false
#| out-width: ~
#| fig-alt: |
#|   Editor de script com o script x y <- 10. Um X vermelho indica que h√° 
#|   um erro de sintaxe. O erro de sintaxe tamb√©m √© destacado com uma linha 
#|   ondulada vermelha. Passar o mouse sobre o X mostra uma caixa de texto 
#|   com o texto "unexpected token y" e "unexpected token <-".

knitr::include_graphics("screenshots/rstudio-diagnostic-tip.png")
```

O RStudio tamb√©m informar√° sobre problemas em potencial:

```{r}
#| echo: false
#| out-width: ~
#| fig-alt: |
#|   Editor de script com o script 3 == NA. Um ponto de exclama√ß√£o amarelo 
#|   indica que pode haver um problema em potencial. Ao passar o mouse sobre o 
#|   ponto de exclama√ß√£o, √© exibida uma caixa de texto com o texto "use is.na to check 
#|   whether expression evaluates to NA".

knitr::include_graphics("screenshots/rstudio-diagnostic-warn.png")
```

### Salvando e nomeando

O RStudio salva automaticamente o conte√∫do do editor de scripts quando voc√™ sai e recarrega automaticamente quando voc√™ reabre.
Contudo, √© altamente recomend√°vel evitar os nomes como Untitled1, Untitled2, Untitled3, etc, que s√£o o padr√£o para arquivos n√£o nomeados. Salve seus scripts e atribua a eles nomes que fa√ßam sentido.

Pode ser tentador nomear seus arquivos `codigo.R` ou `meuscript.R`, mas voc√™ deve pensar um pouco mais antes de escolher um nome para seu arquivo.
Tr√™s princ√≠pios importantes para nomear arquivos s√£o os seguintes:

1.  Os nomes dos arquivos devem ser **leg√≠veis por m√°quina**: evite espa√ßos, s√≠mbolos e caracteres especiais. N√£o confie na sensibilidade a mai√∫sculas e min√∫sculas para distinguir arquivos.
2.  Os nomes dos arquivos devem ser **leg√≠veis por humanos**: use nomes de arquivos para descrever o que est√° no arquivo.
3.  Os nomes dos arquivos devem se dar bem com a ordena√ß√£o padr√£o: comece os nomes dos arquivos com n√∫meros para que a ordena√ß√£o alfab√©tica os coloque na ordem em que s√£o usados.

Por exemplo, suponha que voc√™ tenha os seguintes arquivos em uma pasta de projeto.

```         
modelo alternativo.R
codigo para analise exploratoria.r
relatoriofinal.qmd
RelatorioFinal.qmd
fig 1.png
Figura_02.png
primeira_tentativa_modelo.R
executar-primeiro.r
temporario.txt
```
Existem v√°rios problemas aqui: √© dif√≠cil encontrar qual arquivo executar primeiro, os nomes dos arquivos cont√™m espa√ßos, existem dois arquivos com o mesmo nome, um com caixa alta na primeira letra e outro sem (`relatoriofinal` vs. `RelatorioFinal`[^workflow-scripts-1]), e alguns nomes n√£o descrevem seu conte√∫do (`executar-primeiro` e `temporario`).

[^workflow-scripts-1]: Sem mencionar que voc√™ est√° flertando com o azar ao usar "final" no nome üòÜ A tirinha Piled Higher and Deeper tem uma [divertida historinha sobre isso](https://phdcomics.com/comics/archive.php?comicid=1531).

Aqui est√° uma maneira melhor de nomear e organizar o mesmo conjunto de arquivos:

```         
01-carregar-dados.R
02-analise-exploratoria.R
03-modelo-abordagem-1.R
04-modelo-abordagem-2.R
fig-01.png
fig-02.png
relatorio-2022-03-20.qmd
relatorio-2022-04-02.qmd
notas-rascunho-relatorio.txt
```

Numerar os scripts principais torna √≥bvio a ordem em que devem ser executados e um esquema de nomenclatura consistente facilita a visualiza√ß√£o do que varia.
Al√©m disso, as figuras s√£o rotuladas de maneira semelhante, os relat√≥rios s√£o distinguidos por datas inclu√≠das nos nomes dos arquivos, e `temporario` √© renomeado para `notas-rascunho-relatorio` para descrever melhor seu conte√∫do.
Se voc√™ tem muitos arquivos em um diret√≥rio, √© recomendado levar a organiza√ß√£o um passo adiante e colocar diferentes tipos de arquivos (scripts, figuras, etc.) em diret√≥rios diferentes.

## Projetos

Um dia, voc√™ precisar√° sair do R, fazer outra coisa e voltar para a sua an√°lise mais tarde.
Um dia, voc√™ estar√° trabalhando em v√°rias an√°lises simultaneamente e vai querer mant√™-las separadas.
Um dia, voc√™ precisar√° trazer dados do mundo externo para o R e enviar resultados num√©ricos e figuras do R para o mundo externo.

Para lidar com essas situa√ß√µes da vida real, voc√™ precisa tomar duas decis√µes:

1.  Qual √© a fonte da verdade?
    O que voc√™ vai salvar como seu registro final do que aconteceu?

2.  Onde √© o lar da sua an√°lise?

### Qual √© a fonte da verdade?

Como iniciante, √© aceit√°vel confiar no seu Ambiente (*Environment*) atual para guardar todos os objetos que voc√™ criou durante sua an√°lise.
No entanto, para facilitar o trabalho em projetos maiores ou colaborar com outros, sua fonte da verdade deveriam ser os scripts R.
Com seus scripts R (e seus arquivos de dados), voc√™ pode recriar o ambiente (*Environment*).
Com apenas o seu ambiente, √© muito mais dif√≠cil recriar seus scripts R: voc√™ ter√° que digitar novamente muito c√≥digo de mem√≥ria (inevitavelmente cometendo erros ao longo do caminho) ou ter√° que cuidadosamente extrair seu hist√≥rico R.

Para ajudar a manter seus scripts R como a fonte da verdade para sua an√°lise, recomendamos fortemente que voc√™ instrua o RStudio a n√£o preservar seu espa√ßo de trabalho (`workspace`) entre as sess√µes.
Voc√™ pode fazer isso executando `usethis::use_blank_slate()`[^workflow-scripts-2] ou imitando as op√ß√µes mostradas na @fig-blank-slate. Isso causar√° alguma dor a curto prazo, porque agora, quando voc√™ reiniciar o RStudio, ele n√£o se lembrar√° do c√≥digo que voc√™ executou na √∫ltima vez, nem os objetos que voc√™ criou ou os conjuntos de dados que voc√™ leu estar√£o dispon√≠veis para uso.
Mas essa dor a curto prazo poupa-lhe agonia a longo prazo, pois for√ßa voc√™ a capturar todos os procedimentos importantes em seu c√≥digo.
N√£o h√° nada pior do que descobrir tr√™s meses depois que voc√™ s√≥ armazenou os resultados de um c√°lculo importante em seu ambiente, n√£o o pr√≥prio c√°lculo em seu c√≥digo.

[^workflow-scripts-2]: Se voc√™ n√£o tem o pacote usethis instalado, voc√™ pode instal√°-lo com `install.packages("usethis")`.

```{r}
#| label: fig-blank-slate
#| echo: false
#| fig-cap: |
#|   Copie estas op√ß√µes nas suas op√ß√µes do RStudio para sempre iniciar sua 
#|   sess√£o do RStudio com um ambiente  (*Environment*) limpo.
#| fig-alt: |
#|   Janela de Op√ß√µes Globais do RStudio onde a op√ß√£o Restaurar .RData no espa√ßo de trabalho (*workspace*)
#|   na inicializa√ß√£o n√£o est√° marcada. Al√©m disso, a op√ß√£o Salvar espa√ßo de trabalho (*workspace*) no arquivo .RData 
#|   na sa√≠da est√° configurada para Nunca.
#| out-width: ~

knitr::include_graphics("diagrams/rstudio/clean-slate.png", dpi = 270)
```

Existe um √≥timo par de atalhos de teclado que trabalham juntos para garantir que voc√™ tenha capturado as partes importantes do seu c√≥digo no editor:

1.  Pressione Cmd/Ctrl + Shift + 0/F10 para reiniciar o R.
2.  Pressione Cmd/Ctrl + Shift + S para executar novamente o script atual.

N√≥s usamos coletivamente este padr√£o centenas de vezes por semana.

Alternativamente, se voc√™ n√£o usa atalhos de teclado, voc√™ pode ir para Sess√£o \> Reiniciar R e ent√£o destacar e executar novamente o seu script atual.

::: callout-note
## RStudio server

Se voc√™ est√° usando o RStudio server, sua sess√£o R nunca √© reiniciada por padr√£o.
Quando voc√™ fecha a aba do seu RStudio server, pode parecer que voc√™ est√° fechando o R, mas o servidor na verdade continua rodando em segundo plano.
Na pr√≥xima vez que voc√™ retornar, voc√™ estar√° exatamente no mesmo lugar que deixou.
Isso torna ainda mais importante reiniciar regularmente o R para que voc√™ esteja come√ßando com um ambiente limpo.
:::

### Onde √© o "lar" da sua an√°lise?

O R tem um poderoso conceito de **diret√≥rio de trabalho**.
Este √© o local onde o R procura por arquivos que voc√™ pede para carregar, e onde ele colocar√° quaisquer arquivos que voc√™ pedir para salvar.
O RStudio mostra o seu diret√≥rio de trabalho atual no topo do console:

```{r}
#| echo: false
#| fig-alt: |
#|   A aba Console mostra o diret√≥rio de trabalho atual como 
#|   ~/Documents/r4ds.
#| out-width: ~
knitr::include_graphics("screenshots/rstudio-wd.png")
```


E voc√™ pode imprimir isso em c√≥digo R executando `getwd()`:

```{r}
#| eval: false
getwd()
#> [1] "/Users/hadley/Documents/r4ds"
```

Nesta sess√£o R, o diret√≥rio de trabalho atual (pense nele como "casa") est√° na pasta Documentos do Hadley, em uma subpasta chamada r4ds.
Este c√≥digo retornar√° um resultado diferente quando voc√™ execut√°-lo, porque a estrutura de diret√≥rios do seu computador √© diferente da do Hadley!

Como um usu√°rio iniciante de R, est√° tudo bem em deixar o seu diret√≥rio de trabalho ser o seu diret√≥rio inicial, diret√≥rio de documentos, ou qualquer outro diret√≥rio estranho no seu computador.
Mas voc√™ j√° leu sete cap√≠tulos deste livro, e voc√™ n√£o √© mais um iniciante.
Muito em breve, voc√™ deve evoluir para organizar seus projetos em diret√≥rios e, ao trabalhar em um projeto, definir o diret√≥rio de trabalho do R para o diret√≥rio associado.

Voc√™ pode definir o diret√≥rio de trabalho a partir do pr√≥prio R, mas **n√≥s n√£o recomendamos isso**:

```{r}
#| eval: false
setwd("/caminho/para/meu/ProjetoLegal")
```

Existe uma maneira melhor; uma maneira que tamb√©m te coloca no caminho para gerenciar seu trabalho em R como um especialista.
Essa maneira √© o **projeto** do **RStudio**.

### Projetos do RStudio

Manter todos os arquivos associados a um determinado projeto (dados de entrada, scripts R, resultados anal√≠ticos e figuras) juntos em um diret√≥rio √© uma pr√°tica t√£o s√°bia e comum que o RStudio tem suporte integrado para isso atrav√©s de **projetos**.
Vamos criar um projeto para voc√™ usar enquanto trabalha no restante deste livro.
Clique em Arquivo \> Novo Projeto, e ent√£o siga os passos mostrados em @fig-new-project.

```{r}
#| label: fig-new-project
#| echo: false
#| fig-cap: | 
#|   Para criar um novo projeto: (topo) primeiro clique em Novo Diret√≥rio, depois (meio)
#|   clique em Novo Projeto, ent√£o (abaixo) preencha o nome do diret√≥rio (projeto),
#|   escolha um bom subdiret√≥rio para ser o "lar" do seu projeto, e clique em Criar Projeto.
#| fig-alt: |
#|   Tr√™s capturas de tela do menu Novo Projeto. Na primeira captura de tela, 
#|   a janela Criar Projeto √© mostrada e Novo Diret√≥rio √© selecionado. 
#|   Na segunda captura de tela, a janela Tipo de Projeto √© mostrada e 
#|   Projeto Vazio √© selecionado. Na terceira captura de tela, a janela Criar Novo
#|   Projeto √© mostrada e o nome do diret√≥rio √© dado como r4ds e
#|   o projeto est√° sendo criado como subdiret√≥rio da √Årea de Trabalho.
#| out-width: ~

knitr::include_graphics("diagrams/new-project.png")
```

Nomeie seu projeto como `r4ds` e pense cuidadosamente sobre qual subdiret√≥rio voc√™ colocar√° o projeto.
Se voc√™ n√£o armazen√°-lo em algum lugar que fa√ßa sentido, ser√° dif√≠cil encontr√°-lo no futuro!

Uma vez que esse processo esteja completo, voc√™ ter√° um novo projeto RStudio apenas para este livro.
Verifique se o "lar" do seu projeto √© o diret√≥rio de trabalho atual:

```{r}
#| eval: false
getwd()
#> [1] /Users/hadley/Documents/r4ds
```

Agora insira os seguintes comandos no editor de scripts e salve o arquivo, chamando-o de "diamantes.R".
Em seguida, crie uma nova pasta chamada "dados".
Voc√™ pode fazer isso clicando no bot√£o "Nova Pasta" no painel de Arquivos no RStudio.
Finalmente, execute o script completo, que salvar√° um arquivo PNG e CSV no diret√≥rio do seu projeto.
N√£o se preocupe com os detalhes, voc√™ aprender√° mais tarde no livro.

```{r}
#| label: toy-line
#| eval: false

library(dados)

ggplot(diamante, aes(x = quilate, y = preco)) + 
  geom_hex()
ggsave("diamantes.png")

write_csv(diamante, "dados/diamantes.csv")

```

Feche o RStudio.
Inspecione a pasta associada ao seu projeto - observe o arquivo `.Rproj`.
D√™ um duplo clique nesse arquivo para reabrir o projeto.
Observe que voc√™ volta para onde parou: √© o mesmo diret√≥rio de trabalho e hist√≥rico de comandos, e todos os arquivos em que voc√™ estava trabalhando ainda est√£o abertos.
Porque voc√™ seguiu nossas instru√ß√µes acima, voc√™ ter√°, no entanto, um ambiente completamente novo, garantindo que voc√™ est√° come√ßando com uma folha em branco.

Da maneira que preferir no seu sistema operacional, pesquise no seu computador por `diamantes.png` e voc√™ encontrar√° o PNG (sem surpresa) mas *tamb√©m o script que o criou* (`diamantes.R`).
Isso √© √≥timo!
Um dia, voc√™ vai querer refazer uma figura ou apenas entender de onde ela veio.
Se voc√™ rigorosamente salvar figuras em arquivos **com c√≥digo R** e nunca com o mouse ou a √°rea de transfer√™ncia, voc√™ ser√° capaz de reproduzir trabalhos antigos com facilidade!

### Caminhos relativos e absolutos

Uma vez que voc√™ est√° dentro de um projeto, voc√™ deve usar apenas caminhos relativos, n√£o caminhos absolutos.
Qual √© a diferen√ßa?
Um caminho relativo √© relativo ao diret√≥rio de trabalho, ou seja, a "casa" do projeto.
Quando Hadley escreveu `dados/diamantes.csv` acima, era um atalho para `/Users/hadley/Documents/r4ds/data/diamantes.csv`.
Mas, importante, se a Mine executasse este c√≥digo em seu computador, apontaria para `/Users/Mine/Documents/r4ds/data/diamantes.csv`.
√â por isso que os caminhos relativos s√£o importantes: eles funcionar√£o independentemente de onde a pasta do projeto R terminar.

Os caminhos absolutos apontam para o mesmo lugar, independentemente do seu diret√≥rio de trabalho.
Eles parecem um pouco diferentes dependendo do seu sistema operacional.
No Windows, eles come√ßam com uma letra de unidade (por exemplo, `C:`) ou duas barras invertidas (por exemplo, `\\servername`) e no Mac/Linux eles come√ßam com uma barra "/" (por exemplo, `/users/hadley`).
Voc√™ **nunca** deve usar caminhos absolutos em seus scripts, porque eles dificultam o compartilhamento: ningu√©m mais ter√° exatamente a mesma configura√ß√£o de diret√≥rio que voc√™.

H√° outra diferen√ßa importante entre os sistemas operacionais: como voc√™ separa os componentes do caminho.
Mac e Linux usam barras (por exemplo, `dados/diamantes.csv`) e o Windows usa barras invertidas (por exemplo, `dados\diamantes.csv`).
O R pode trabalhar com qualquer tipo (n√£o importa a plataforma que voc√™ est√° usando atualmente), mas infelizmente, barras invertidas significam algo especial para o R, e para obter uma √∫nica barra invertida no caminho, voc√™ precisa digitar duas barras invertidas!
Isso pode te frustrar, ent√£o recomendamos sempre usar o estilo do Linux/Mac com barras normais.

## Exerc√≠cios

1.  Acesse a conta do Twitter RStudio Tips (em ingl√™s), <https://twitter.com/rstudiotips> e encontre uma dica que pare√ßa interessante.
  Pratique us√°-la!

2.  Quais outros erros comuns o diagn√≥stico do RStudio ir√° reportar?
  Leia (em ingl√™s) <https://support.posit.co/hc/en-us/articles/205753617-Code-Diagnostics> para descobrir.

## Sum√°rio

Neste cap√≠tulo, voc√™ aprendeu como organizar seu c√≥digo R em scripts (arquivos) e projetos (diret√≥rios).
Assim como o estilo de c√≥digo, isso pode parecer trabalho desnecess√°rio no in√≠cio.
Mas √† medida que voc√™ acumula mais c√≥digo em v√°rios projetos, voc√™ aprender√° a apreciar como uma pequena organiza√ß√£o inicial pode economizar muito tempo no futuro.

Em resumo, scripts e projetos fornecem um fluxo de trabalho s√≥lido que te servir√° bem no futuro:

-   Crie um projeto RStudio para cada projeto de an√°lise de dados.
-   Salve seus scripts (com nomes informativos) no projeto, edite-os, execute-os em partes ou como um todo. Reinicie o R frequentemente para garantir que voc√™ capturou tudo em seus scripts.
-   Use apenas caminhos relativos, nunca caminhos absolutos.

Ent√£o tudo que voc√™ precisa est√° em um lugar e claramente separado de todos os outros projetos em que voc√™ est√° trabalhando.

At√© agora, trabalhamos com conjuntos de dados inclu√≠dos em pacotes R.
Isso facilita a pr√°tica em dados pr√©-preparados, mas obviamente seus dados n√£o estar√£o dispon√≠veis desta forma.
Ent√£o, no pr√≥ximo cap√≠tulo, voc√™ vai aprender como carregar dados do computador para a sua sess√£o R usando o pacote readr.
