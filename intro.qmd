# âœ… IntroduÃ§Ã£o {#sec-intro .unnumbered}

```{r}
#| echo: false

source("_common.R")
```

CiÃªncia de dados Ã© uma Ã¡rea emocionante que permite que vocÃª transforme dados brutos em compreensÃ£o, *insights* e conhecimento.
O objetivo do livro "R para CiÃªncia de Dados" Ã© ajudar vocÃª a aprender as ferramentas mais importantes em R que permitirÃ£o que vocÃª realize ciÃªncia de dados de forma eficiente e reprodutÃ­vel, e se divirta ao longo do caminho ğŸ˜ƒ.
ApÃ³s a leitura deste livro, vocÃª terÃ¡ as ferramentas necessÃ¡rias para enfrentar uma ampla variedade de desafios de ciÃªncia de dados usando as melhores partes do R.

## O que vocÃª aprenderÃ¡

A ciÃªncia de dados Ã© um campo vasto, e nÃ£o Ã© possÃ­vel dominÃ¡-la lendo apenas um Ãºnico livro.
Este livro tem como objetivo fornecer a vocÃª uma base sÃ³lida nas ferramentas mais importantes e conhecimento suficiente para encontrar os recursos necessÃ¡rios para aprender mais quando for preciso.
Nosso modelo das etapas de um projeto tÃ­pico de ciÃªncia de dados se parece com @fig-ds-diagram.

```{r}
#| label: fig-ds-diagram
#| echo: false
#| fig-cap: |
#|   Em nosso modelo do processo de ciÃªncia de dados, vocÃª comeÃ§a com a importaÃ§Ã£o
#|   e organizaÃ§Ã£o dos dados. Em seguida, vocÃª entende seus dados por meio de um ciclo iterativo de
#|   transformaÃ§Ã£o, visualizaÃ§Ã£o e modelagem. VocÃª finaliza o ciclo
#|   comunicando seus resultados para outras pessoas.
#| fig-alt: |
#|   Um diagrama que exibe o ciclo de ciÃªncia de dados: Importar -> Organizar (Tidy) -> Compreender
#|   (com as fases Transformar -> Visualizar -> Modelar em um ciclo) ->
#|   Comunicar. Em torno de todas essas etapas estÃ¡ a etapa de Comunicar.
#| out.width: NULL

knitr::include_graphics("diagrams/data-science/base.png", dpi = 270)
```

Primeiro, vocÃª deve **importar** seus dados para o R.
Isso geralmente significa que vocÃª pega dados armazenados em um arquivo, um banco de dados ou uma *API* (interface de programaÃ§Ã£o de aplicaÃ§Ã£o, ou ***A**pplication **P**rogramming **I**nterface* em inglÃªs) da web e importa em uma tabela (*data frame*) no R.
Se vocÃª nÃ£o conseguir importar seus dados para o R, nÃ£o poderÃ¡ fazer ciÃªncia de dados com eles!

Depois de importar seus dados, Ã© uma boa ideia **organizÃ¡-los** .\
Organizar seus dados significa armazenÃ¡-los em uma forma consistente que corresponda Ã  semÃ¢ntica do conjunto de dados com a forma como ele Ã© armazenado.
Em resumo, quando seus dados estÃ£o organizados no formato *tidy*[^intro-1], cada coluna Ã© uma variÃ¡vel e cada linha Ã© uma observaÃ§Ã£o.

[^intro-1]: **Nota de traduÃ§Ã£o**: *tidy* Ã© um verbo em inglÃªs que quer dizer "arrumar/organizar".
    *Tidy data* Ã© uma forma de organizar os dados, que serÃ¡ abordado no capÃ­tulo @sec-data-tidy.

Dados no formato tidy (*tidy data*) sÃ£o importantes porque a estrutura consistente permite que vocÃª concentre seus esforÃ§os em responder perguntas sobre os dados, em vez de lutar para colocar os dados na forma correta para usar diferentes funÃ§Ãµes.
Depois de ter dados organizados, normalmente o prÃ³ximo passo Ã© **transformÃ¡-los**.
A transformaÃ§Ã£o inclui focar em observaÃ§Ãµes de interesse (como todas as pessoas em uma cidade ou todos os dados do Ãºltimo ano), criar novas variÃ¡veis que sÃ£o funÃ§Ãµes de variÃ¡veis existentes (como calcular a velocidade a partir da distÃ¢ncia e do tempo) e calcular um conjunto de estatÃ­sticas resumidas (como contagens ou mÃ©dias).
Juntos, organizar e transformar sÃ£o chamados de **manipulaÃ§Ã£o de dados**[^intro-2].

[^intro-2]: **Nota de traduÃ§Ã£o**: ManipulaÃ§Ã£o de dados Ã© chamado em inglÃªs de *data wrangling*, porque colocar seus dados em uma forma natural de trabalhar frequentemente parece uma luta (*wrangle*)!

Uma vez que vocÃª tenha dados organizados e com as variÃ¡veis de que precisa, existem duas principais fontes de geraÃ§Ã£o de conhecimento: visualizaÃ§Ã£o e modelagem.
Essas tÃªm pontos fortes e fracos complementares, portanto, qualquer anÃ¡lise de dados real irÃ¡ iterar entre elas muitas vezes.

**VisualizaÃ§Ã£o** Ã© uma atividade fundamentalmente humana.
Uma boa visualizaÃ§Ã£o mostrarÃ¡ coisas que vocÃª nÃ£o esperava ou levantarÃ¡ novas questÃµes sobre os dados.
Uma boa visualizaÃ§Ã£o tambÃ©m pode sugerir que vocÃª estÃ¡ fazendo a pergunta errada ou que precisa coletar dados diferentes.
As visualizaÃ§Ãµes podem surpreender vocÃª, mas nÃ£o escalam particularmente bem porque exigem que um ser humano as interprete.

**Modelos** sÃ£o ferramentas complementares Ã  visualizaÃ§Ã£o.
Depois de tornar suas perguntas suficientemente precisas, vocÃª pode usar um modelo para respondÃª-las.
Os modelos sÃ£o fundamentalmente ferramentas matemÃ¡ticas ou computacionais, entÃ£o geralmente escalam bem.
Mesmo quando nÃ£o o fazem, geralmente Ã© mais barato comprar mais computadores do que comprar mais cÃ©rebros!
No entanto, cada modelo faz suposiÃ§Ãµes, e, por sua prÃ³pria natureza, um modelo nÃ£o pode questionar suas prÃ³prias suposiÃ§Ãµes.
Isso significa que um modelo nÃ£o pode, fundamentalmente, surpreendÃª-lo.

A Ãºltima etapa da ciÃªncia de dados Ã© a **comunicaÃ§Ã£o**, uma parte absolutamente crÃ­tica de qualquer projeto de anÃ¡lise de dados.
NÃ£o importa o quÃ£o bem seus modelos e visualizaÃ§Ãµes tenham ajudado vocÃª a entender os dados, a menos que vocÃª tambÃ©m possa comunicar seus resultados para outras pessoas.

Em torno de todas essas ferramentas estÃ¡ a programaÃ§Ã£o.
A programaÃ§Ã£o Ã© uma ferramenta abrangente que Ã© usada em quase todas as partes de um projeto de ciÃªncia de dados.
NÃ£o Ã© necessÃ¡rio ser uma pessoa especialista em programaÃ§Ã£o para ter sucesso na ciÃªncia de dados, mas aprender mais sobre programaÃ§Ã£o compensa, pois se tornar melhor em programaÃ§Ã£o permite automatizar tarefas comuns e resolver novos problemas com maior facilidade.

VocÃª usarÃ¡ essas ferramentas em todos os projetos de ciÃªncia de dados, mas para a maioria deles, elas nÃ£o sÃ£o suficientes.
HÃ¡ uma regra aproximada de 80/20 em jogo: vocÃª pode abordar cerca de 80% de cada projeto usando as ferramentas que aprenderÃ¡ neste livro, mas precisarÃ¡ de outras ferramentas para lidar com os 20% restantes.
Ao longo deste livro, indicaremos recursos onde vocÃª pode aprender mais.

## Como este livro estÃ¡ organizado

A descriÃ§Ã£o anterior das ferramentas da ciÃªncia de dados estÃ¡ organizada aproximadamente de acordo com a ordem em que vocÃª as utiliza em uma anÃ¡lise (embora, Ã© claro, vocÃª vÃ¡ iterar por elas vÃ¡rias vezes).
Em nossa experiÃªncia, no entanto, aprender primeiro a importaÃ§Ã£o e organizaÃ§Ã£o de dados nÃ£o Ã© a melhor escolha, porque essas tarefas sÃ£o, 80% do tempo, rotineiras e entediantes, e nos outros 20% do tempo, sÃ£o estranhas e frustrantes.
Esse nÃ£o Ã© um bom ponto de partida para aprender um novo assunto!
Em vez disso, comeÃ§aremos com a visualizaÃ§Ã£o e transformaÃ§Ã£o de dados que jÃ¡ foram importados e organizados.
Dessa forma, quando vocÃª importar e organizar seus prÃ³prios dados, sua motivaÃ§Ã£o permanecerÃ¡ alta, porque vocÃª sabe que o esforÃ§o vale a pena.

Dentro de cada capÃ­tulo, procuramos seguir um padrÃ£o consistente: comeÃ§ar com alguns exemplos motivadores para que vocÃª possa entender o panorama geral e, em seguida, aprofundar nos detalhes.
Cada seÃ§Ã£o do livro Ã© acompanhada de exercÃ­cios para ajudar vocÃª a praticar o que aprendeu.
Embora possa ser tentador pular os exercÃ­cios, a melhor maneira de aprender Ã© praticando com problemas reais.

## O que vocÃª nÃ£o aprenderÃ¡

Existem vÃ¡rios tÃ³picos importantes que este livro nÃ£o aborda.
Acreditamos que Ã© importante manter um foco rigoroso no essencial para que vocÃª possa comeÃ§ar o mais rÃ¡pido possÃ­vel.
Isso significa que nÃ£o Ã© possÃ­vel, neste livro, abordar todos os tÃ³picos importantes.

### Modelagem

A modelagem Ã© extremamente importante para a ciÃªncia de dados, mas Ã© um tÃ³pico amplo e, infelizmente, nÃ£o temos espaÃ§o suficiente para abordÃ¡-lo adequadamente aqui.
Para aprender mais sobre modelagem, recomendamos fortemente o livro [Tidy Modeling with R](https://www.tmwr.org), escrito por nossos colegas Max Kuhn e Julia Silge.
O livro [Tidy Modeling with R](https://www.tmwr.org) ensinarÃ¡ a vocÃª a famÃ­lia de pacotes tidymodels, que, como vocÃª pode imaginar pelo nome, compartilha muitas convenÃ§Ãµes com os pacotes do tidyverse que usamos neste livro.

### Big data

Este livro orgulhosamente e principalmente foca em conjuntos de dados pequenos e que cabem na memÃ³ria[^intro-3] (*in-memory*).

[^intro-3]: **Nota de traduÃ§Ã£o**: "Caber na memÃ³ria" se refere Ã  memÃ³ria RAM (*random access memory*) do computador, cuja funÃ§Ã£o Ã© guardar temporariamente toda a informaÃ§Ã£o que o computador precisa (por exemplo, as bases de dados importadas).

Este Ã© o lugar certo para comeÃ§ar, porque vocÃª nÃ£o poderÃ¡ lidar com *big data* a menos que jÃ¡ tenha experiÃªncia com bases de dados pequenas.
As ferramentas que vocÃª aprenderÃ¡ ao longo da maior parte deste livro lidarÃ£o facilmente com centenas de megabytes de dados e, com um pouco de cuidado, vocÃª geralmente poderÃ¡ usÃ¡-las para trabalhar com alguns gigabytes de dados.
TambÃ©m mostraremos como obter dados de bancos de dados e arquivos parquet, ambos frequentemente usados para armazenar *big data*.
VocÃª nÃ£o necessariamente conseguirÃ¡ trabalhar com o conjunto de dados inteiro, mas isso nem sempre Ã© um problema, pois, em muitos casos, vocÃª sÃ³ precisa de um subconjunto ou uma amostra para responder Ã  pergunta que te interessa.

Se vocÃª estÃ¡ rotineiramente lidando com dados maiores (digamos, de 10 a 100 GB), recomendamos aprender mais sobre o pacote [data.table](https://github.com/Rdatatable/data.table).
NÃ£o o ensinamos aqui porque ele usa uma interface diferente do tidyverse e requer que vocÃª aprenda algumas convenÃ§Ãµes diferentes.
No entanto, ele Ã© incrivelmente mais rÃ¡pido, e o retorno no desempenho compensa o tempo investido para aprender a usÃ¡-lo, se vocÃª estiver trabalhando com *big data*.

### Python, Julia e outros

Neste livro, vocÃª nÃ£o aprenderÃ¡ nada sobre Python, Julia ou qualquer outra linguagem de programaÃ§Ã£o Ãºtil para a ciÃªncia de dados.
Isso nÃ£o Ã© porque achamos que essas ferramentas sÃ£o ruins.
Elas nÃ£o sÃ£o!
E, na prÃ¡tica, a maioria das equipes de ciÃªncia de dados usa uma combinaÃ§Ã£o de linguagens, muitas vezes pelo menos R e Python.
Mas acreditamos firmemente que Ã© melhor dominar uma ferramenta de cada vez, e R Ã© um Ã³timo ponto de partida.

## PrÃ©-requisitos

Fizemos algumas suposiÃ§Ãµes sobre o que vocÃª jÃ¡ deveria saber para aproveitar ao mÃ¡ximo este livro.
VocÃª deve ter uma compreensÃ£o geral de matemÃ¡tica e Ã© Ãºtil se vocÃª jÃ¡ tiver alguma experiÃªncia bÃ¡sica em programaÃ§Ã£o.
Se vocÃª nunca programou antes, pode achar o livro [Hands on Programming with R](https://rstudio-education.github.io/hopr/), escrito por Garrett, um recurso valioso para complementar este livro.

VocÃª precisarÃ¡ de quatro coisas para executar os cÃ³digos deste livro: R, RStudio, um conjunto de pacotes R chamado **tidyverse** e alguns outros pacotes.
Pacotes sÃ£o as unidades fundamentais de cÃ³digo R reprodutÃ­vel.
Eles incluem funÃ§Ãµes reutilizÃ¡veis, documentaÃ§Ã£o que descreve como usÃ¡-los e dados de exemplo.

### R

Para baixar o R, acesse o CRAN, o **c**omprehensive **R** **a**rchive **n**etwork, em <https://cloud.r-project.org>.
Uma nova versÃ£o principal do R Ã© lanÃ§ada anualmente, e hÃ¡ 2-3 lanÃ§amentos menores a cada ano.
Ã‰ uma boa ideia atualizar regularmente.
A atualizaÃ§Ã£o pode ser um pouco complicada, especialmente para as versÃµes principais que exigem que vocÃª reinstale todos os seus pacotes, mas adiÃ¡-la sÃ³ torna as coisas piores.
Recomendamos o R 4.2.0 ou posterior para este livro.

### RStudio

O RStudio Ã© uma *IDE* (ambiente de desenvolvimento integrado), para programaÃ§Ã£o em R, que vocÃª pode baixar em <https://posit.co/download/rstudio-desktop/>.
O RStudio Ã© atualizado algumas vezes por ano e ele o informarÃ¡ automaticamente quando uma nova versÃ£o estiver disponÃ­vel, portanto, nÃ£o Ã© necessÃ¡rio verificar periodicamente.
Ã‰ uma boa ideia atualizar regularmente para aproveitar os recursos mais recentes e melhorados.
Para este livro, certifique-se de ter pelo menos o RStudio 2022.02.0.

Quando vocÃª inicia o RStudio, @fig-rstudio-console, vocÃª verÃ¡ duas partes principais na interface: o painel de console (*Console*) e o painel de saÃ­da (*Output*).
Por enquanto, tudo o que vocÃª precisa saber Ã© que vocÃª digita o cÃ³digo R no *Console* e pressiona Enter para executÃ¡-lo.
VocÃª aprenderÃ¡ mais Ã  medida que avanÃ§armos![^intro-4]

[^intro-4]: Se vocÃª deseja uma visÃ£o abrangente de todos os recursos do RStudio, consulte o Guia de uso do RStudio em <https://docs.posit.co/ide/user>.

```{r}
#| label: fig-rstudio-console
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   O RStudio possui duas partes principais: digite o cÃ³digo em R no Console
#|   Ã  esquerda e procure o painel Plots dentro do painel Output Ã  direita.
#| fig-alt: |
#|   O RStudio com os painÃ©is Console e Output destacados.
knitr::include_graphics("diagrams/rstudio/console.png", dpi = 270)
```

### O tidyverse

VocÃª tambÃ©m precisarÃ¡ instalar alguns pacotes do R.
Um **pacote** do R Ã© uma coleÃ§Ã£o de funÃ§Ãµes, dados e documentaÃ§Ã£o que estende as capacidades do R base.
O uso de pacotes Ã© fundamental para o uso bem-sucedido do R.
A maioria dos pacotes que vocÃª aprenderÃ¡ neste livro faz parte do chamado tidyverse.
Todos os pacotes no tidyverse compartilham uma filosofia comum de dados e programaÃ§Ã£o em R e sÃ£o projetados para funcionar juntos.

VocÃª pode instalar o tidyverse completo com uma Ãºnica linha de cÃ³digo:

```{r}
#| eval: false

install.packages("tidyverse")
```

Em seu computador, digite essa linha de cÃ³digo no console e pressione Enter para executÃ¡-la.
O R farÃ¡ o download dos pacotes do CRAN e os instalarÃ¡ em seu computador.

VocÃª nÃ£o poderÃ¡ usar as funÃ§Ãµes, objetos ou arquivos de ajuda de um pacote atÃ© carregÃ¡-lo com `library()`.
Depois de instalar um pacote, vocÃª pode carregÃ¡-lo usando a funÃ§Ã£o `library()`:

```{r}
library(tidyverse)
```

Isso informa que o tidyverse carrega nove pacotes: dplyr, forcats, ggplot2, lubridate, purrr, readr, stringr, tibble, tidyr.
Esses sÃ£o considerados o **nÃºcleo** do tidyverse porque vocÃª os usarÃ¡ em quase todas as anÃ¡lises.

Os pacotes do tidyverse mudam com bastante frequÃªncia.
VocÃª pode verificar se hÃ¡ atualizaÃ§Ãµes disponÃ­veis executando `tidyverse_update()`.

### Outros pacotes

Existem muitos outros pacotes excelentes que nÃ£o fazem parte do tidyverse porque resolvem problemas em um domÃ­nio diferente ou sÃ£o projetados com um conjunto diferente de princÃ­pios subjacentes.
Isso nÃ£o os torna melhores ou piores; apenas os torna diferentes.
Em outras palavras, o complemento ao tidyverse nÃ£o Ã© o messyverse[^intro-5], mas muitos outros universos de pacotes inter-relacionados.

[^intro-5]: **Nota de traduÃ§Ã£o**: *tidyverse* Ã© a uniÃ£o das palavras *tidy* (arrumado) e *universe* (universo), sendo entÃ£o a ideia de um "universo arrumado".
    *messy* quer dizer desarrumado, e *messyverse* seria a ideia de um universo desarrumado.

Conforme vocÃª enfrenta mais projetos de ciÃªncia de dados com R, aprenderÃ¡ novos pacotes e novas formas de pensar sobre dados.

Usaremos muitos pacotes de fora do tidyverse neste livro.
Por exemplo, usaremos os seguintes pacotes porque eles fornecem conjuntos de dados interessantes para trabalharmos no processo de aprendizado do R:

```{r}
#| eval: false

install.packages(
  c("arrow", "curl", "remotes", "duckdb",
    "ggrepel", "ggridges", "ggthemes", "hexbin", "janitor",  
    "leaflet", "maps", "openxlsx", 
    "repurrrsive", "tidymodels", "writexl")
  )

# Instalar o pacote de dados
remotes::install_github("cienciadedatos/dados")
```

TambÃ©m usaremos uma seleÃ§Ã£o de outros pacotes para exemplos isolados.
VocÃª nÃ£o precisa instalÃ¡-los agora, apenas lembre-se de que sempre que vir um erro como este:

```{r}
#| eval: false

library(ggrepel)
#> Error in library(ggrepel) : there is no package called â€˜ggrepelâ€™
```

VocÃª precisarÃ¡ executar `install.packages("ggrepel")` para instalar o pacote.

## Executando cÃ³digo em R

A seÃ§Ã£o anterior mostrou vÃ¡rios exemplos de execuÃ§Ã£o de cÃ³digo em R.
O cÃ³digo no livro parece assim:

```{r}
#| eval: true
1 + 2
```

Se vocÃª executar o mesmo cÃ³digo no seu *console*, ele parecerÃ¡ assim:

```         
> 1 + 2
[1] 3
```

Existem duas diferenÃ§as principais.
No seu *console*, vocÃª digita apÃ³s o `>`, chamado de **prompt**; nÃ£o mostramos o prompt no livro.
No livro, a saÃ­da Ã© comentada com `#>`; no seu *console*, ela aparece diretamente apÃ³s o cÃ³digo.
Essas duas diferenÃ§as significam que se vocÃª estiver trabalhando com uma versÃ£o online do livro, poderÃ¡ copiar facilmente o cÃ³digo do livro e colÃ¡-lo no *console*.

Ao longo do livro, usamos um conjunto consistente de convenÃ§Ãµes para se referir ao cÃ³digo:

-   FunÃ§Ãµes sÃ£o exibidas em uma fonte de cÃ³digo e seguidas por parÃªnteses, como `sum()` ou `mean()`.

-   Outros objetos R (como dados ou argumentos de funÃ§Ã£o) estÃ£o em uma fonte de cÃ³digo, sem parÃªnteses, como `voos` ou `x`.

-   Ã€s vezes, para deixar claro de qual pacote um objeto vem, usaremos o nome do pacote seguido por quatro-pontos `::`, como `dplyr::mutate()` ou `dados::voos`.
    Isso tambÃ©m Ã© cÃ³digo em R vÃ¡lido.

## Agradecimentos

Este livro nÃ£o Ã© apenas o produto de Hadley, Mine e Garrett, mas Ã© o resultado de muitas conversas (pessoalmente e online) que tivemos com muitas pessoas na comunidade R.
Estamos incrivelmente gratos por todas as conversas que tivemos com todos vocÃªs; muito obrigado!

```{r}
#| eval: false
#| echo: false

library(tidyverse)
contribs_all_json <- gh::gh("/repos/:owner/:repo/contributors",
  owner = "hadley",
  repo = "r4ds",
  .limit = Inf
)
contribs_all <- tibble(
  login = contribs_all_json |> map_chr("login"),
  n = contribs_all_json |> map_int("contributions")
)

contribs_old <- read_csv("contributors.csv", col_types = list())
contribs_new <- contribs_all |> anti_join(contribs_old, by = "login")

# Get info for new contributors
needed_json <- map(
  contribs_new$login, 
  ~ gh::gh("/users/:username", username = .x),
  .progress = TRUE
)
info_new <- tibble(
  login = contribs_new$login,
  name = map_chr(needed_json, "name", .default = NA),
  blog = map_chr(needed_json, "blog", .default = NA)
)
info_old <- contribs_old |> select(login, name, blog)
info_all <- bind_rows(info_old, info_new)

contribs_all <- contribs_all |> 
  left_join(info_all, by = "login") |> 
  mutate(login_lowercase = str_to_lower(login)) |>
  arrange(login_lowercase) |>
  select(-login_lowercase)
write_csv(contribs_all, "contributors.csv")
```

```{r}
#| results: asis
#| echo: false
#| message: false

library(dplyr)
contributors <- readr::read_csv("contributors.csv")
contributors <- contributors |> 
  filter(!login %in% c("hadley", "garrettgman", "mine-cetinkaya-rundel")) |> 
  mutate(
    login = paste0("\\@", login),
    desc = ifelse(is.na(name), login, paste0(name, " (", login, ")"))
  )

cat("Este livro foi escrito de forma colaborativa e muitas pessoas contribuÃ­ram por meio de pull requests. Um agradecimento especial a todas as ",nrow(contributors), " pessoas que contribuÃ­ram com melhorias por meio de pull requests no GitHub (em ordem alfabÃ©tica pelo nome de usuÃ¡rio): ", sep = "")
cat(paste0(contributors$desc, collapse = ", "))
cat(".\n")
```

## ConsideraÃ§Ãµes Finais

A versÃ£o online deste livro estÃ¡ disponÃ­vel em <https://cienciadedatos.github.io/pt-r4ds/>.
O cÃ³digo fonte do livro estÃ¡ disponÃ­vel em <https://github.com/cienciadedatos/pt-r4ds>.
O livro Ã© gerado pelo [Quarto](https://quarto.org), que facilita a escrita de livros que combinam texto e cÃ³digo executÃ¡vel.

```{r}
#| eval: false
#| echo: false
#| results: asis

pkgs <- sessioninfo::package_info(
  tidyverse:::tidyverse_packages(),
  dependencies = FALSE
)
df <- tibble(
  package = pkgs$package,
  version = pkgs$ondiskversion,
  source = gsub("@", "\\\\@", pkgs$source)
)
knitr::kable(df, format = "markdown")
```

```{r}
#| include: false

cli:::ruler()
```
